import numpy as np
import matplotlib.pyplot as plt
import argparse
import cv2

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file',
    help='Path to video file (if not using camera)')
parser.add_argument('-c', '--color', type=str, default='red',
    help='Color space: "color" (default) or "red"')
parser.add_argument('-b', '--bins', type=int, default=16,
    help='Number of bins per channel (default 16)')
parser.add_argument('-w', '--width', type=int, default=0,
    help='Resize video to specified width in pixels (maintains aspect)')
args = vars(parser.parse_args())

if not args.get('file', False):
    capture = cv2.VideoCapture('1.mpg')

color = args['color']
bins = args['bins']
resizeWidth = args['width']
# Initialize plot.
fig, ax = plt.subplots()
if color == 'rgb':
    ax.set_title('Histogram (Red)')
else:
    ax.set_title('Histogram (Red)')
ax.set_xlabel('Bin')
ax.set_ylabel('Frequency')
lw = 3
alpha = 0.5
if color == 'red':
    lineR, = ax.plot(np.arange(bins), np.zeros((bins,)), c='r', lw=lw, alpha=alpha)
   
ax.set_xlim(0, bins-1)
ax.set_ylim(0, 1)
plt.ion()
plt.show()
# Grab, process, and display video frames. Update plot line object(s).
while True:
    (grabbed, frame) = capture.read()
    if not grabbed:
        break
       if resizeWidth > 0:
        (height, width) = frame.shape[:2]
        resizeHeight = int(float(resizeWidth / width) * height)
        frame = cv2.resize(frame, (resizeWidth, resizeHeight),
            interpolation=cv2.INTER_AREA)
    numPixels = np.prod(frame.shape[:2])
    if color == 'rgb':
        cv2.VideoCapture('1.mpg')
        (b, g, r) = cv2.split(frame)
        histogramR = cv2.calcHist([r], [0], None, [bins], [0, 255]) / numPixels
        lineR.set_ydata(histogramR)
    fig.canvas.draw()
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
capture.release()
out.release()
cv2.destroyAllWindows()
